{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    br: \"br\",\n    code: \"code\",\n    em: \"em\",\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    table: \"table\",\n    tbody: \"tbody\",\n    td: \"td\",\n    th: \"th\",\n    thead: \"thead\",\n    tr: \"tr\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"string-type\",\n      children: \"String Type\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's have a look at \", _jsx(_components.a, {\n        href: \"https://golang.org/ref/spec#String_types\",\n        children: \"String Type\"\n      }), \". String has some complexity to it, but let's have a look at the \", _jsx(_components.em, {\n        children: \"simplicity\"\n      }), \" of String. Remember, Go has some goals: efficient compilation, efficient execution, and ease of programming.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Let's create a variable that is of type String. A string can be created with double quotes \", _jsx(_components.code, {\n        children: \"\\\"\\\"\"\n      }), \" or with backticks ````.  A string created with backticks is a raw \", _jsx(_components.a, {\n        href: \"https://golang.org/ref/spec#String_literals\",\n        children: \"string literal\"\n      }), \", so it will include any returns, spaces, whatever.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nvar string_literal string\\n\\nfunc main() {\\n\\ts := \\\"Hello, playground\\\"\\n\\tstring_literal = `\\\"Hello,\\n\\t\\n\\tplayground\\\"`\\n\\tfmt.Println(s)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", s)\\n\\tfmt.Println(string_literal)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", string_literal)\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"What the Go spec says about \", _jsx(_components.a, {\n        href: \"https://golang.org/ref/spec#String_types\",\n        children: \"String Types\"\n      }), \" is,\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"A string type represents the set of string values. A string value is a (possibly empty) sequence of bytes. Strings are immutable: once created, it is impossible to change the contents of a string. The predeclared string type is string.\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"So, it's a \", _jsx(_components.em, {\n        children: \"sequence of bytes\"\n      }), \". What that means is that it is a \", _jsx(_components.em, {\n        children: \"slice of bytes\"\n      }), \". A \", _jsx(_components.code, {\n        children: \"byte\"\n      }), \" is a type. It is an \", _jsx(_components.em, {\n        children: \"alias\"\n      }), \" for an \", _jsx(_components.code, {\n        children: \"int8\"\n      }), \". Let's use \", _jsx(_components.em, {\n        children: \"conversion\"\n      }), \" to convert this string to a slice of bytes, \", _jsx(_components.code, {\n        children: \"bs := []byte(s)\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nvar string_literal string\\n\\nfunc main() {\\n\\ts := \\\"Hello, playground\\\"\\n\\tfmt.Println(s)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", s)\\n\\tbs := []byte(s)\\n\\tfmt.Println(bs)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", bs)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://play.golang.org/p/KHBPNGXcax\",\n        children: \"playground\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Notice that this returns the slice of bytes \", _jsx(_components.code, {\n        children: \"[72 101 108 108 111 44 32 112 108 97 121 103 114 111 117 110 100]\"\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"If we look at the \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/ASCII\",\n        children: \"ASCII\"\n      }), \" coding scheme, we can see that 72 is a capital \\\"H\\\", and \", _jsx(_components.code, {\n        children: \"101\"\n      }), \", \", _jsx(_components.code, {\n        children: \"108\"\n      }), \", \", _jsx(_components.code, {\n        children: \"108\"\n      }), \", \", _jsx(_components.code, {\n        children: \"111\"\n      }), \" are \", _jsx(_components.code, {\n        children: \"\\\"e\\\"\"\n      }), \", \", _jsx(_components.code, {\n        children: \"\\\"l\\\"\"\n      }), \", \", _jsx(_components.code, {\n        children: \"\\\"l\\\"\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"\\\"o\\\"\"\n      }), \", respectively. This shows that in this string, we have used a coding scheme to represent letters of the alphabet. Those letters are being represented by the numbers in this slice of bytes. In this case, they are being represented as decimal numbers. In programming, we also represent things in hexadecimal numbers. Hexadecimal is just another way of representing numbers; it's base 16 whereas decimal numbers are base 10.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"In UTF-8, a UTF-8 code point is 1 to 4 bytes. Each code point corresponds to a character.\", _jsx(_components.br, {}), \"\\n\", \"We have just seen that \", _jsx(_components.code, {\n        children: \"72\"\n      }), \" corresponds to \", _jsx(_components.code, {\n        children: \"\\\"H\\\"\"\n      }), \" in this case. And in the ASCII coding scheme, \", _jsx(_components.code, {\n        children: \"72\"\n      }), \" corresponds to the binary \", _jsx(_components.code, {\n        children: \"100 1000\"\n      }), \", which is \", _jsx(_components.code, {\n        children: \"48\"\n      }), \" in hexadecimal.\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"To take a look deeper into the internals, and the hexadecimal, UTF-8 way, we can have a look in the \", _jsx(_components.code, {\n        children: \"fmt\"\n      }), \" \", _jsx(_components.a, {\n        href: \"https://golang.org/pkg/fmt/\",\n        children: \"package documentation\"\n      }), \", particularly \", _jsx(_components.code, {\n        children: \"%x\"\n      })]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"%s\\tthe uninterpreted bytes of the string or slice\\n%q\\ta double-quoted string safely escaped with Go syntax\\n%x\\tbase 16, lower-case, two characters per byte\\n%X\\tbase 16, upper-case, two characters per byte\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"And if we scroll down to the \\\"Other flags:\\\" section\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"+\\talways print a sign for numeric values;\\n\\tguarantee ASCII-only output for %q (%+q)\\n-\\tpad with spaces on the right rather than the left (left-justify the field)\\n#\\talternate format: add leading 0 for octal (%#o), 0x for hex (%#x);\\n\\t0X for hex (%#X); suppress 0x for %p (%#p);\\n\\tfor %q, print a raw (backquoted) string if strconv.CanBackquote\\n\\treturns true;\\n\\talways print a decimal point for %e, %E, %f, %F, %g and %G;\\n\\tdo not remove trailing zeros for %g and %G;\\n\\twrite e.g. U+0078 'x' if the character is printable for %U (%#U).\\n' '\\t(space) leave a space for elided sign in numbers (% d);\\n\\tput spaces between bytes printing strings or slices in hex (% x, % X)\\n0\\tpad with leading zeros rather than spaces;\\n\\tfor numbers, this moves the padding after the sign\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Particularly, the like \", _jsx(_components.code, {\n        children: \"write e.g. U+0078 'x' if the character is printable for %U (%#U).\"\n      }), \"Let's have a look at some of the UTF-8 characters, using \", _jsx(_components.code, {\n        children: \"%#U\"\n      }), \":\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nvar string_literal string\\n\\nfunc main() {\\n\\ts := \\\"Hello, playground\\\"\\n\\tfmt.Println(s)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", s)\\n\\t\\n\\tbs := []byte(s)\\n\\tfmt.Println(bs)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", bs)\\n\\t\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tfmt.Printf(\\\"%#U \\\", s[i])\\n\\t}\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://play.golang.org/p/kGTLPKu25w\",\n        children: \"playground\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Another thing we can do is loop over the range of \", _jsx(_components.code, {\n        children: \"s\"\n      }), \" and print out the index position and the hex value\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nvar string_literal string\\n\\nfunc main() {\\n\\ts := \\\"Hello, playground\\\"\\n\\tfmt.Println(s)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", s)\\n\\t\\n\\tbs := []byte(s)\\n\\t\\n\\t/* Show each character from string s in decimal */\\n\\tfmt.Println(bs)\\n\\tfmt.Printf(\\\"%T\\\\n\\\", bs)\\n\\t\\n\\t/* Show each character from string s in UTF-8 code point */\\n\\tfor i := 0; i < len(s); i++ {\\n\\t\\tfmt.Printf(\\\"%#U \\\", s[i])\\n\\t}\\n\\t\\n\\tfmt.Println(\\\"\\\")\\n\\t\\n\\t/* Show each character from string s in hexadecimal */\\n\\tfor i, v := range s {\\n\\t\\tfmt.Printf(\\\"At index position %d we have hex %#x\\\\n\\\", i, v)\\n\\t}\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://play.golang.org/p/gYJKyZSg7g\",\n        children: \"playground\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"You can verify in the output with the \", _jsx(_components.a, {\n        href: \"https://en.wikipedia.org/wiki/ASCII\",\n        children: \"ASCII coding scheme\"\n      }), \" and see it matches up:\"]\n    }), \"\\n\", _jsxs(_components.table, {\n      children: [_jsx(_components.thead, {\n        children: _jsxs(_components.tr, {\n          children: [_jsx(_components.th, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"Binary\"\n          }), _jsx(_components.th, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"Hex\"\n          }), _jsx(_components.th, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"Glyph\"\n          })]\n        })\n      }), _jsxs(_components.tbody, {\n        children: [_jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"100 1000\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"48\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"H\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 0101\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"65\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"e\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1100\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6C\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"l\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1100\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6C\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"l\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1111\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6F\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"o\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"010 1100\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"2C\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \",\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"010 0000\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"20\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"space\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"111 0000\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"70\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"p\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1100\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6C\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"l\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 0001\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"61\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"a\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"111 1001\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"79\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"y\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 0111\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"67\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"g\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"111 0010\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"72\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"r\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1111\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6F\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"o\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"111 0101\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"75\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"u\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 1110\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"6E\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"n\"\n          })]\n        }), _jsxs(_components.tr, {\n          children: [_jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"110 0100\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"64\"\n          }), _jsx(_components.td, {\n            style: {\n              textAlign: \"center\"\n            },\n            children: \"d\"\n          })]\n        })]\n      })]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each character from the string \", _jsx(_components.code, {\n        children: \"\\\"Hello, playground\\\"\"\n      }), \" in:\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Decimal notation\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"[72 101 108 108 111 44 32 112 108 97 121 103 114 111 117 110 100]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"UTF-8 code point\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"U+0048 'H' U+0065 'e' U+006C 'l' U+006C 'l' U+006F 'o' U+002C ',' U+0020 ' ' U+0070 'p' U+006C 'l' U+0061 'a' U+0079 'y' U+0067 'g' U+0072 'r' U+006F 'o' U+0075 'u' U+006E 'n' U+0064 'd'\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hexadecimal\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"0x48 0x65 0x6c 0x6c 0x6f 0x2c 0x20 0x70 0x6c 0x61 0x79 0x67 0x72 0x6f 0x75 0x6e 0x64\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each code point is known as a \", _jsx(_components.code, {\n        children: \"rune\"\n      }), \", which is an alias for \", _jsx(_components.code, {\n        children: \"int32\"\n      }), \". Each \", _jsx(_components.code, {\n        children: \"rune\"\n      }), \" is a code point in UTF-8.\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"diving-deeper\",\n      children: \"Diving Deeper\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://blog.golang.org/strings\",\n          children: \"Strings, bytes, runes and characters in Go\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"To recap, we write strings either enclosed in double quotes or as string literals in backticks. All the code you write in Go is encoded as UTF-8, but that doesn't mean that all of your strings are going to be UTF-8 code points. You could have bytes which don't correspond to a code point.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A string is a slice of bytes. It is immutable, which means its value cannot be modified. We can assign a new value:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport (\\n\\t\\\"fmt\\\"\\n)\\n\\nvar string_literal string\\n\\nfunc main() {\\n\\ts := \\\"Hello, playground\\\"\\n\\ts = \\\"Hello, go programmer\\\"\\n\\tfmt.Println(s)\\n\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.a, {\n        href: \"https://play.golang.org/p/hWyRQR9EK-\",\n        children: \"playground\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So, you can assign a new value, but you cannot change the bytes of a string. So a string is an immutable slice of bytes. You can do conversion and see that slice of bytes, and see how it translates back to the ASCII UTF-8 coding scheme.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"On the \", _jsx(_components.a, {\n        href: \"https://golang.org/\",\n        children: \"Golang website\"\n      }), \" they have Asian characters in the example. Go ahead and use the techniques from this lesson and see that those characters are \", _jsx(_components.em, {\n        children: \"more than one byte\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        className: \"language-go\",\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tfmt.Println(\\\"Hello,Sangam\\\")\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{"title":"String Type","description":"Learning Go programming","order":26},"courseSlug":"quick-start-with-golang","modules":[{"slug":"01-introduction-to-go","title":"Introduction to Go","description":"Learn about the Go programming language, its history, features, and why it's becoming increasingly popular for modern software development.","order":1},{"slug":"02-lets-start-with-first-hello-world-program","title":"Lets Start With First Hello world Program","description":"Learning Go programming","order":2},{"slug":"03-numeral-systems---decimal","title":"Numeral Systems - Decimal","description":"Learning Go programming","order":3},{"slug":"04-numeral-systems---binary","title":"Numeral Systems - Binary","description":"Learning Go programming","order":4},{"slug":"05-numeral-systems---hexadecimal","title":"Numeral Systems - Hexadecimal","description":"Learning Go programming","order":5},{"slug":"06-numeral-systems---loop","title":"Numeral Systems - Loop","description":"Learning Go programming","order":6},{"slug":"07-numeral-systems-utf-8","title":"Numeral Systems UTF-8","description":"Learning Go programming","order":7},{"slug":"08-short-variable-declarations","title":"Short variable declarations","description":"Learning Go programming","order":8},{"slug":"09-variable-with-zero-value","title":"Variable with zero value","description":"Learning Go programming","order":9},{"slug":"10-deep-drive-on-variables","title":"Deep Drive on Variables","description":"Learning Go programming","order":10},{"slug":"11-hello-world-in-go","title":"Hello World in Go","description":"Write and understand your first Go program","order":11},{"slug":"12-deep-drive-on-constants","title":"Deep Drive On Constants","description":"Learning Go programming","order":12},{"slug":"13-loop-init-condition-post","title":"Loop  Init, Condition, Post","description":"Learning Go programming","order":13},{"slug":"14-loop---nested-loops","title":"Loop - Nested Loops","description":"Learning Go programming","order":14},{"slug":"15-loop---for-statement","title":"Loop - For Statement","description":"Learning Go programming","order":15},{"slug":"16-loop---break-continue","title":"Loop - Break & Continue","description":"Learning Go programming","order":16},{"slug":"17-generate-random-number-with-mathcryptorand-in-go","title":"Generate Random number with math/crypto/rand in Go","description":"Learning Go programming","order":17},{"slug":"18-loop---printing-ascii","title":"Loop - Printing ASCII","description":"Learning Go programming","order":18},{"slug":"19-conditional---if-statement","title":"Conditional - If Statement","description":"Learning Go programming","order":19},{"slug":"20-conditional---if-else-if-else","title":"Conditional - If, Else if, Else","description":"Learning Go programming","order":20},{"slug":"21-loop-conditional-modulus","title":"Loop, Conditional, Modulus","description":"Learning Go programming","order":21},{"slug":"22-variables-and-data-types","title":"Variables and Data Types","description":"Learn about variables, data types, and how to work with them in Go","order":22},{"slug":"23-conditional---switch-statement","title":"Conditional - Switch Statement","description":"Learning Go programming","order":23},{"slug":"24-conditional---switch-statement-documentation","title":"Conditional - Switch Statement Documentation","description":"Learning Go programming","order":24},{"slug":"25-conditional-logic-operators","title":"Conditional Logic Operators","description":"Learning Go programming","order":25},{"slug":"26-string-type","title":"String Type","description":"Learning Go programming","order":26},{"slug":"27-bool-type","title":"Bool Type","description":"Learning Go programming","order":27},{"slug":"28-structs","title":"Structs","description":"Learning Go programming","order":28},{"slug":"29-struct-literal","title":"Struct Literal","description":"Learning Go programming","order":29},{"slug":"30-pointer-to-struct","title":"Pointer to struct","description":"Learning Go programming","order":30},{"slug":"31-conversion-not-casting","title":"Conversion, Not Casting","description":"Learning Go programming","order":31},{"slug":"32-creating-your-own-type","title":"Creating Your Own Type","description":"Learning Go programming","order":32},{"slug":"33-control-structures","title":"Control Structures","description":"Learn about conditional statements and loops in Go","order":33},{"slug":"34-defer","title":"Defer","description":"Learning Go programming","order":34},{"slug":"35-stacking-defers","title":"Stacking defers","description":"Learning Go programming","order":35},{"slug":"36-pointer","title":"Pointer","description":"Learning Go programming","order":36},{"slug":"37-prefix-suffix","title":"Prefix Suffix","description":"Learning Go programming","order":37},{"slug":"38-conversion-between-array-and-slice","title":"Conversion between array and slice","description":"Learning Go programming","order":38},{"slug":"39-methods","title":"methods","description":"Learning Go programming","order":39},{"slug":"40-variadic-function","title":"variadic function","description":"Learning Go programming","order":40},{"slug":"41-init-function","title":"init Function","description":"Learning Go programming","order":41},{"slug":"42-command-line-arguments-and-file-io","title":"Command Line Arguments and File I/O","description":"Learning Go programming","order":42},{"slug":"43-what-is-interface-","title":"what is interface ?","description":"Learning Go programming","order":43},{"slug":"44-functions-in-go","title":"Functions in Go","description":"Learn how to create and use functions in Go, including function parameters, return values, and closures","order":44},{"slug":"45-retrieving-the-golang-version","title":"Retrieving the Golang version","description":"Learning Go programming","order":45},{"slug":"46-accessing-program-arguments","title":"accessing program arguments","description":"Learning Go programming","order":46},{"slug":"47-creating-a-program-interface-with-the-flag-package","title":"Creating a program interface with the flag package","description":"Learning Go programming","order":47},{"slug":"48-retrieving-the-current-working-directory","title":"Retrieving the current working directory","description":"Learning Go programming","order":48},{"slug":"49-getting-the-current-process-pid","title":"Getting the current process PID","description":"Learning Go programming","order":49},{"slug":"50-handling-operating-system-signals","title":"Handling operating system signals","description":"Learning Go programming","order":50},{"slug":"51-calling-an-external-proces","title":"calling an external proces","description":"Learning Go programming","order":51},{"slug":"52-retrieving-child-process-information","title":"Retrieving child process information","description":"Learning Go programming","order":52},{"slug":"53-reading-writing-from-the-child-process","title":"Reading writing from the child process","description":"Learning Go programming","order":53},{"slug":"54-shutting-down-the-application-gracefully","title":"Shutting down the application gracefully","description":"Learning Go programming","order":54},{"slug":"55-file-configuration-with-functional-options","title":"file configuration with functional options","description":"Learning Go programming","order":55},{"slug":"56-finding-the-substring-in-a-string","title":"Finding the substring in a string","description":"Learning Go programming","order":56},{"slug":"57-breaking-the-string-into-words","title":"breaking the string into words","description":"Learning Go programming","order":57},{"slug":"58-joining-the-string-slice-with-a-separator","title":"Joining the string slice with a separator","description":"Learning Go programming","order":58},{"slug":"59-concatenating-a-string-with-writer","title":"Concatenating a string with writer","description":"Learning Go programming","order":59},{"slug":"60-aligning-text-with-tabwriter","title":"Aligning text with tabwriter","description":"Learning Go programming","order":60},{"slug":"61-replacing-part-of-the-string","title":"Replacing part of the string","description":"Learning Go programming","order":61},{"slug":"62-finding-the-substring-in-text-by-the-regex-pattern","title":"finding the substring in text by the regex pattern","description":"Learning Go programming","order":62},{"slug":"63-controlling-case","title":"controlling case","description":"Learning Go programming","order":63},{"slug":"64-parsing-comma-separated-data","title":"parsing comma-separated data","description":"Learning Go programming","order":64},{"slug":"65-managing-whitespace-in-a-string","title":"managing whitespace in a string","description":"Learning Go programming","order":65},{"slug":"66-indenting-a-text-document","title":"indenting a text document","description":"Learning Go programming","order":66},{"slug":"67-converting-strings-to-numbers","title":"converting strings to numbers","description":"Learning Go programming","order":67},{"slug":"68-comparing-floating-point-numbers","title":"comparing floating-point numbers","description":"Learning Go programming","order":68},{"slug":"69-rounding-floating-point-numbers","title":"rounding floating-point numbers","description":"Learning Go programming","order":69},{"slug":"70-floating-point-arithmetics","title":"floating-point arithmetics","description":"Learning Go programming","order":70},{"slug":"71-formatting-numbers","title":"formatting numbers","description":"Learning Go programming","order":71},{"slug":"72-converting-between-binary-octal-decimal-and-hexadecimal","title":"Converting between binary, octal, decimal, and hexadecimal","description":"Learning Go programming","order":72},{"slug":"73-formatting-with-the-correct-plurals","title":"formatting with the correct plurals","description":"Learning Go programming","order":73},{"slug":"74-generating-random-numbers","title":"generating random numbers","description":"Learning Go programming","order":74},{"slug":"75-operating-complex-numbers","title":"operating complex numbers","description":"Learning Go programming","order":75},{"slug":"76-converting-between-degrees-and-radians","title":"converting between degrees and radians","description":"Learning Go programming","order":76},{"slug":"77-taking-logarithms","title":"taking logarithms","description":"Learning Go programming","order":77},{"slug":"78-generating-checksums","title":"generating checksums","description":"Learning Go programming","order":78},{"slug":"79-reading-standard-input","title":"reading standard input","description":"Learning Go programming","order":79},{"slug":"80-writing-standard-output-and-error","title":"Writing standard output and error","description":"Learning Go programming","order":80},{"slug":"81-opening-a-file-by-name","title":"opening a file by name","description":"Learning Go programming","order":81},{"slug":"82-reading-the-file-into-a-string","title":"reading the file into a string","description":"Learning Go programming","order":82},{"slug":"83-reading-writing-a-different-charset","title":"Reading writing a different charset","description":"Learning Go programming","order":83},{"slug":"84-seeking-a-position-within-a-file","title":"Seeking a position within a file","description":"Learning Go programming","order":84},{"slug":"85-reading-and-writing-binary-data","title":"reading and writing binary data","description":"Learning Go programming","order":85},{"slug":"86-writing-to-multiple-writers-at-once","title":"writing to multiple writers at once","description":"Learning Go programming","order":86},{"slug":"87-piping-between-writer-and-reader","title":"piping between writer and reader","description":"Learning Go programming","order":87},{"slug":"88-serializing-objects-to-binary-format","title":"serializing objects to binary format","description":"Learning Go programming","order":88},{"slug":"89-reading-and-writing-zip-files","title":"reading and writing ZIP files","description":"Learning Go programming","order":89},{"slug":"90-parsing-a-large-xml-file-effectively","title":"Parsing a large XML file effectively","description":"Learning Go programming","order":90},{"slug":"91-extracting-data-from-an-incomplete-json-array","title":"extracting data from an incomplete JSON array","description":"Learning Go programming","order":91},{"slug":"92-getting-file-information","title":"getting file information","description":"Learning Go programming","order":92},{"slug":"93-creating-temporary-files","title":"creating temporary files","description":"Learning Go programming","order":93},{"slug":"94-writing-the-file","title":"writing the file","description":"Learning Go programming","order":94},{"slug":"95-writing-the-file-from-multiple-goroutines","title":"writing the file from multiple goroutines","description":"Learning Go programming","order":95},{"slug":"96-listing-a-directory","title":"listing a directory","description":"Learning Go programming","order":96},{"slug":"97-changing-file-permissions","title":"Changing file permissions","description":"Learning Go programming","order":97},{"slug":"98-creating-files-and-directories","title":"Creating files and directories","description":"Learning Go programming","order":98},{"slug":"99-filtering-file-listings","title":"Filtering file listings","description":"Learning Go programming","order":99},{"slug":"100-comparing-two-files","title":"comparing two files","description":"Learning Go programming","order":100},{"slug":"101-resolving-the-user-home-directory","title":"Resolving the user home directory","description":"Learning Go programming","order":101},{"slug":"example-code-highlighting","title":"Code Highlighting Examples","description":"Learn how to use various code syntax highlighting features in Go examples","order":101},{"slug":"custom-code-highlighting","title":"Advanced Code Highlighting Features","description":"Learn how to use the enhanced code block features like line highlighting, titles, and more.","order":102}],"currentModule":{"slug":"26-string-type","title":"String Type","description":"Learning Go programming","order":26}},"__N_SSG":true}