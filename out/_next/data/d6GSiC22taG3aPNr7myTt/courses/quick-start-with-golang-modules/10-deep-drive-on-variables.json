{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    code: \"code\",\n    h2: \"h2\",\n    h4: \"h4\",\n    p: \"p\",\n    pre: \"pre\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"\\npackage main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tvar message string\\n\\tmessage = \\\"Hello World.\\\"\\n\\tfmt.Println(message)\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"lets start with the simple program in which we will going to declare variable call message with string type and we will assign\\nvalue to var message and we will print that variable if you go variable var which is assigned to message thats hello world .\\nwow! you successfully executed !!\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"so you got ideas on variable lets declare more than one variable and print values to better understanding\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tvar message string\\n\\tvar a, b, c int\\n\\ta = 1\\n\\n\\tmessage = \\\"Hello World!\\\"\\n\\n\\tfmt.Println(message, a, b, c)\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"in this program we are init many variable at once if your beginner to golang its better to try out !!\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\n\\tvar message = \\\"Hello World!\\\"\\n\\tvar a, b, c int = 1, 2, 3\\n\\n\\tfmt.Println(message, a, b, c)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"in this program we are declaring variable without declaring variable type lets check it out:-\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\n\\tvar message = \\\"Hello World!\\\"\\n\\tvar a, b, c = 1, 2, 3\\n\\n\\tfmt.Println(message, a, b, c)\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"in the above program we just given same value for varible lets try some diff values \", _jsx(_components.code, {\n        children: \" var a, b, c = 1, false, 3\"\n      }), \" like this\\ntry out this program for better understandending\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\n\\tvar message = \\\"Hello World!\\\"\\n\\tvar a, b, c = 1, false, 3\\n\\n\\tfmt.Println(message, a, b, c)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"we are lazy programmer !! haha !!\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"try out short variable declarations so in this we don't need to use the var syntax or its type all right !!\\n\", _jsx(_components.code, {\n        children: \":=\"\n      }), \" use this short variable declaration method but condition is you can only do this inside a func\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\n\\t// you can only do this inside a func\\n\\tmessage := \\\"Hello World!\\\"\\n\\ta, b, c := 1, false, 3\\n\\td := 4\\n\\te := true\\n\\n\\tfmt.Println(message, a, b, c, d, e)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"look like now everyone is doing good !! with variable\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"in this program we are declaring folllowing variable with respective values\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"a -  this is stored in the variable a\\nb -  stored in b\\nc -  stored in c\\nd -  stored in d\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"declare a,b,c,d variable outside of main function with var syntax\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"e -  42\\nf -  43\\ng -  stored in g\\nh -  stored in h\\ni -  stored in i\\nj -  44.7\\nk -  true\\nl -  false\\nm -  109\\nn -  n\\no -  o\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"and declare above variable with short variable declaration and print variable\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nvar a = \\\"this is stored in the variable a\\\"     // package scope\\nvar b, c string = \\\"stored in b\\\", \\\"stored in c\\\" // package scope\\nvar d string                                   // package scope\\n\\nfunc main() {\\n\\n\\td = \\\"stored in d\\\" // declaration above; assignment here; package scope\\n\\tvar e = 42        // function scope - subsequent variables have func scope:\\n\\tf := 43\\n\\tg := \\\"stored in g\\\"\\n\\th, i := \\\"stored in h\\\", \\\"stored in i\\\"\\n\\tj, k, l, m := 44.7, true, false, 'm' // single quotes\\n\\tn := \\\"n\\\"                             // double quotes\\n\\to := `o`                             // back ticks\\n\\n\\tfmt.Println(\\\"a - \\\", a)\\n\\tfmt.Println(\\\"b - \\\", b)\\n\\tfmt.Println(\\\"c - \\\", c)\\n\\tfmt.Println(\\\"d - \\\", d)\\n\\tfmt.Println(\\\"e - \\\", e)\\n\\tfmt.Println(\\\"f - \\\", f)\\n\\tfmt.Println(\\\"g - \\\", g)\\n\\tfmt.Println(\\\"h - \\\", h)\\n\\tfmt.Println(\\\"i - \\\", i)\\n\\tfmt.Println(\\\"j - \\\", j)\\n\\tfmt.Println(\\\"k - \\\", k)\\n\\tfmt.Println(\\\"l - \\\", l)\\n\\tfmt.Println(\\\"m - \\\", m)\\n\\tfmt.Println(\\\"n - \\\", n)\\n\\tfmt.Println(\\\"o - \\\", o)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h4, {\n      id: \"if-you-want-to-do-more-hands-on-try-out-following-programms\",\n      children: \"if you want to do more hands on try out following programms\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nvar name = \\\"sangam\\\"\\n\\nfunc main() {\\n\\tfmt.Println(\\\"Hello \\\", name)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"another-way\",\n      children: \"another way\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tname := \\\"sangam\\\"\\n\\tfmt.Println(\\\"Hello \\\", name)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"another-way-1\",\n      children: \"another way\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"package main\\n\\nimport \\\"fmt\\\"\\n\\nfunc main() {\\n\\tname := `sangam` // back-ticks work like double-quotes\\n\\tfmt.Println(\\\"Hello \\\", name)\\n}\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{"title":"Deep Drive on Variables","description":"Learning Go programming","order":10},"courseSlug":"quick-start-with-golang-modules","modules":[{"slug":"01-introduction-to-go","title":"Introduction to Go","description":"Learn about the Go programming language, its history, features, and why it's becoming increasingly popular for modern software development.","order":1},{"slug":"02-lets-start-with-first-hello-world-program","title":"Lets Start With First Hello world Program","description":"Learning Go programming","order":2},{"slug":"03-numeral-systems---decimal","title":"Numeral Systems - Decimal","description":"Learning Go programming","order":3},{"slug":"04-numeral-systems---binary","title":"Numeral Systems - Binary","description":"Learning Go programming","order":4},{"slug":"05-numeral-systems---hexadecimal","title":"Numeral Systems - Hexadecimal","description":"Learning Go programming","order":5},{"slug":"06-numeral-systems---loop","title":"Numeral Systems - Loop","description":"Learning Go programming","order":6},{"slug":"07-numeral-systems-utf-8","title":"Numeral Systems UTF-8","description":"Learning Go programming","order":7},{"slug":"08-short-variable-declarations","title":"Short variable declarations","description":"Learning Go programming","order":8},{"slug":"09-variable-with-zero-value","title":"Variable with zero value","description":"Learning Go programming","order":9},{"slug":"10-deep-drive-on-variables","title":"Deep Drive on Variables","description":"Learning Go programming","order":10},{"slug":"11-hello-world-in-go","title":"Hello World in Go","description":"Write and understand your first Go program","order":11},{"slug":"12-deep-drive-on-constants","title":"Deep Drive On Constants","description":"Learning Go programming","order":12},{"slug":"13-loop-init-condition-post","title":"Loop  Init, Condition, Post","description":"Learning Go programming","order":13},{"slug":"14-loop---nested-loops","title":"Loop - Nested Loops","description":"Learning Go programming","order":14},{"slug":"15-loop---for-statement","title":"Loop - For Statement","description":"Learning Go programming","order":15},{"slug":"16-loop---break-continue","title":"Loop - Break & Continue","description":"Learning Go programming","order":16},{"slug":"17-generate-random-number-with-mathcryptorand-in-go","title":"Generate Random number with math/crypto/rand in Go","description":"Learning Go programming","order":17},{"slug":"18-loop---printing-ascii","title":"Loop - Printing ASCII","description":"Learning Go programming","order":18},{"slug":"19-conditional---if-statement","title":"Conditional - If Statement","description":"Learning Go programming","order":19},{"slug":"20-conditional---if-else-if-else","title":"Conditional - If, Else if, Else","description":"Learning Go programming","order":20},{"slug":"21-loop-conditional-modulus","title":"Loop, Conditional, Modulus","description":"Learning Go programming","order":21},{"slug":"22-variables-and-data-types","title":"Variables and Data Types","description":"Learn about variables, data types, and how to work with them in Go","order":22},{"slug":"23-conditional---switch-statement","title":"Conditional - Switch Statement","description":"Learning Go programming","order":23},{"slug":"24-conditional---switch-statement-documentation","title":"Conditional - Switch Statement Documentation","description":"Learning Go programming","order":24},{"slug":"25-conditional-logic-operators","title":"Conditional Logic Operators","description":"Learning Go programming","order":25},{"slug":"26-string-type","title":"String Type","description":"Learning Go programming","order":26},{"slug":"27-bool-type","title":"Bool Type","description":"Learning Go programming","order":27},{"slug":"28-structs","title":"Structs","description":"Learning Go programming","order":28},{"slug":"29-struct-literal","title":"Struct Literal","description":"Learning Go programming","order":29},{"slug":"30-pointer-to-struct","title":"Pointer to struct","description":"Learning Go programming","order":30},{"slug":"31-conversion-not-casting","title":"Conversion, Not Casting","description":"Learning Go programming","order":31},{"slug":"32-creating-your-own-type","title":"Creating Your Own Type","description":"Learning Go programming","order":32},{"slug":"33-control-structures","title":"Control Structures","description":"Learn about conditional statements and loops in Go","order":33},{"slug":"34-defer","title":"Defer","description":"Learning Go programming","order":34},{"slug":"35-stacking-defers","title":"Stacking defers","description":"Learning Go programming","order":35},{"slug":"36-pointer","title":"Pointer","description":"Learning Go programming","order":36},{"slug":"37-prefix-suffix","title":"Prefix Suffix","description":"Learning Go programming","order":37},{"slug":"38-conversion-between-array-and-slice","title":"Conversion between array and slice","description":"Learning Go programming","order":38},{"slug":"39-methods","title":"methods","description":"Learning Go programming","order":39},{"slug":"40-variadic-function","title":"variadic function","description":"Learning Go programming","order":40},{"slug":"41-init-function","title":"init Function","description":"Learning Go programming","order":41},{"slug":"42-command-line-arguments-and-file-io","title":"Command Line Arguments and File I/O","description":"Learning Go programming","order":42},{"slug":"43-what-is-interface-","title":"what is interface ?","description":"Learning Go programming","order":43},{"slug":"44-functions-in-go","title":"Functions in Go","description":"Learn how to create and use functions in Go, including function parameters, return values, and closures","order":44},{"slug":"45-retrieving-the-golang-version","title":"Retrieving the Golang version","description":"Learning Go programming","order":45},{"slug":"46-accessing-program-arguments","title":"accessing program arguments","description":"Learning Go programming","order":46},{"slug":"47-creating-a-program-interface-with-the-flag-package","title":"Creating a program interface with the flag package","description":"Learning Go programming","order":47},{"slug":"48-retrieving-the-current-working-directory","title":"Retrieving the current working directory","description":"Learning Go programming","order":48},{"slug":"49-getting-the-current-process-pid","title":"Getting the current process PID","description":"Learning Go programming","order":49},{"slug":"50-handling-operating-system-signals","title":"Handling operating system signals","description":"Learning Go programming","order":50},{"slug":"51-calling-an-external-proces","title":"calling an external proces","description":"Learning Go programming","order":51},{"slug":"52-retrieving-child-process-information","title":"Retrieving child process information","description":"Learning Go programming","order":52},{"slug":"53-reading-writing-from-the-child-process","title":"Reading writing from the child process","description":"Learning Go programming","order":53},{"slug":"54-shutting-down-the-application-gracefully","title":"Shutting down the application gracefully","description":"Learning Go programming","order":54},{"slug":"55-file-configuration-with-functional-options","title":"file configuration with functional options","description":"Learning Go programming","order":55},{"slug":"56-finding-the-substring-in-a-string","title":"Finding the substring in a string","description":"Learning Go programming","order":56},{"slug":"57-breaking-the-string-into-words","title":"breaking the string into words","description":"Learning Go programming","order":57},{"slug":"58-joining-the-string-slice-with-a-separator","title":"Joining the string slice with a separator","description":"Learning Go programming","order":58},{"slug":"59-concatenating-a-string-with-writer","title":"Concatenating a string with writer","description":"Learning Go programming","order":59},{"slug":"60-aligning-text-with-tabwriter","title":"Aligning text with tabwriter","description":"Learning Go programming","order":60},{"slug":"61-replacing-part-of-the-string","title":"Replacing part of the string","description":"Learning Go programming","order":61},{"slug":"62-finding-the-substring-in-text-by-the-regex-pattern","title":"finding the substring in text by the regex pattern","description":"Learning Go programming","order":62},{"slug":"63-controlling-case","title":"controlling case","description":"Learning Go programming","order":63},{"slug":"64-parsing-comma-separated-data","title":"parsing comma-separated data","description":"Learning Go programming","order":64},{"slug":"65-managing-whitespace-in-a-string","title":"managing whitespace in a string","description":"Learning Go programming","order":65},{"slug":"66-indenting-a-text-document","title":"indenting a text document","description":"Learning Go programming","order":66},{"slug":"67-converting-strings-to-numbers","title":"converting strings to numbers","description":"Learning Go programming","order":67},{"slug":"68-comparing-floating-point-numbers","title":"comparing floating-point numbers","description":"Learning Go programming","order":68},{"slug":"69-rounding-floating-point-numbers","title":"rounding floating-point numbers","description":"Learning Go programming","order":69},{"slug":"70-floating-point-arithmetics","title":"floating-point arithmetics","description":"Learning Go programming","order":70},{"slug":"71-formatting-numbers","title":"formatting numbers","description":"Learning Go programming","order":71},{"slug":"72-converting-between-binary-octal-decimal-and-hexadecimal","title":"Converting between binary, octal, decimal, and hexadecimal","description":"Learning Go programming","order":72},{"slug":"73-formatting-with-the-correct-plurals","title":"formatting with the correct plurals","description":"Learning Go programming","order":73},{"slug":"74-generating-random-numbers","title":"generating random numbers","description":"Learning Go programming","order":74},{"slug":"75-operating-complex-numbers","title":"operating complex numbers","description":"Learning Go programming","order":75},{"slug":"76-converting-between-degrees-and-radians","title":"converting between degrees and radians","description":"Learning Go programming","order":76},{"slug":"77-taking-logarithms","title":"taking logarithms","description":"Learning Go programming","order":77},{"slug":"78-generating-checksums","title":"generating checksums","description":"Learning Go programming","order":78},{"slug":"79-reading-standard-input","title":"reading standard input","description":"Learning Go programming","order":79},{"slug":"80-writing-standard-output-and-error","title":"Writing standard output and error","description":"Learning Go programming","order":80},{"slug":"81-opening-a-file-by-name","title":"opening a file by name","description":"Learning Go programming","order":81},{"slug":"82-reading-the-file-into-a-string","title":"reading the file into a string","description":"Learning Go programming","order":82},{"slug":"83-reading-writing-a-different-charset","title":"Reading writing a different charset","description":"Learning Go programming","order":83},{"slug":"84-seeking-a-position-within-a-file","title":"Seeking a position within a file","description":"Learning Go programming","order":84},{"slug":"85-reading-and-writing-binary-data","title":"reading and writing binary data","description":"Learning Go programming","order":85},{"slug":"86-writing-to-multiple-writers-at-once","title":"writing to multiple writers at once","description":"Learning Go programming","order":86},{"slug":"87-piping-between-writer-and-reader","title":"piping between writer and reader","description":"Learning Go programming","order":87},{"slug":"88-serializing-objects-to-binary-format","title":"serializing objects to binary format","description":"Learning Go programming","order":88},{"slug":"89-reading-and-writing-zip-files","title":"reading and writing ZIP files","description":"Learning Go programming","order":89},{"slug":"90-parsing-a-large-xml-file-effectively","title":"Parsing a large XML file effectively","description":"Learning Go programming","order":90},{"slug":"91-extracting-data-from-an-incomplete-json-array","title":"extracting data from an incomplete JSON array","description":"Learning Go programming","order":91},{"slug":"92-getting-file-information","title":"getting file information","description":"Learning Go programming","order":92},{"slug":"93-creating-temporary-files","title":"creating temporary files","description":"Learning Go programming","order":93},{"slug":"94-writing-the-file","title":"writing the file","description":"Learning Go programming","order":94},{"slug":"95-writing-the-file-from-multiple-goroutines","title":"writing the file from multiple goroutines","description":"Learning Go programming","order":95},{"slug":"96-listing-a-directory","title":"listing a directory","description":"Learning Go programming","order":96},{"slug":"97-changing-file-permissions","title":"Changing file permissions","description":"Learning Go programming","order":97},{"slug":"98-creating-files-and-directories","title":"Creating files and directories","description":"Learning Go programming","order":98},{"slug":"99-filtering-file-listings","title":"Filtering file listings","description":"Learning Go programming","order":99},{"slug":"100-comparing-two-files","title":"comparing two files","description":"Learning Go programming","order":100},{"slug":"101-resolving-the-user-home-directory","title":"Resolving the user home directory","description":"Learning Go programming","order":101},{"slug":"example-code-highlighting","title":"Code Highlighting Examples","description":"Learn how to use various code syntax highlighting features in Go examples","order":101},{"slug":"custom-code-highlighting","title":"Advanced Code Highlighting Features","description":"Learn how to use the enhanced code block features like line highlighting, titles, and more.","order":102}],"currentModule":{"slug":"10-deep-drive-on-variables","title":"Deep Drive on Variables","description":"Learning Go programming","order":10}},"__N_SSG":true}