{"pageProps":{"frontmatter":{"title":"Your First Go Program","slug":"your-first-go-program","description":"Write your first Go program and understand the basic structure of Go code.","duration":"20 minutes","level":"Beginner","tags":["Go","Basics"],"prerequisites":[]},"slug":"your-first-go-program","mdxSource":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    a: \"a\",\n    code: \"code\",\n    h1: \"h1\",\n    h2: \"h2\",\n    h3: \"h3\",\n    li: \"li\",\n    p: \"p\",\n    pre: \"pre\",\n    span: \"span\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  }, {Callout, Step, Terminal} = _components;\n  if (!Callout) _missingMdxReference(\"Callout\", true);\n  if (!Step) _missingMdxReference(\"Step\", true);\n  if (!Terminal) _missingMdxReference(\"Terminal\", true);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"your-first-go-program\",\n      children: \"Your First Go Program\"\n    }), \"\\n\", _jsx(Callout, {\n      type: \"info\",\n      children: _jsx(_components.p, {\n        children: \"This lab will guide you through writing your first Go program and understanding the basic structure of Go code.\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"learning-objectives\",\n      children: \"Learning Objectives\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"By the end of this lab, you will be able to:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Set up a Go development environment\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Create and run a simple Go program\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Understand the basic structure of a Go program\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"Use the \", _jsx(_components.code, {\n          children: \"fmt\"\n        }), \" package for output\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"introduction\",\n      children: \"Introduction\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Go (or Golang) is a statically typed, compiled programming language designed at Google. It's known for its simplicity, efficiency, and built-in concurrency features. In this lab, we'll write our first Go program and explore the basic structure of Go code.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"setup\",\n      children: \"Setup\"\n    }), \"\\n\", _jsxs(Step, {\n      number: \"1\",\n      title: \"Set up your environment\",\n      children: [_jsx(_components.p, {\n        children: \"First, make sure you have Go installed on your system. You can check by running:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"go version\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"If Go is not installed, follow the instructions on the \", _jsx(_components.a, {\n          href: \"https://golang.org/doc/install\",\n          children: \"official Go website\"\n        }), \".\"]\n      })]\n    }), \"\\n\", _jsxs(Step, {\n      number: \"2\",\n      title: \"Create a new project\",\n      children: [_jsx(_components.p, {\n        children: \"Create a new directory for your project:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"mkdir hello-world\\ncd hello-world\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Initialize a new Go module:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"go mod init example.com/hello-world\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This creates a \", _jsx(_components.code, {\n          children: \"go.mod\"\n        }), \" file that defines your module and its dependencies.\"]\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"writing-your-first-go-program\",\n      children: \"Writing Your First Go Program\"\n    }), \"\\n\", _jsxs(Step, {\n      number: \"3\",\n      title: \"Create your first Go file\",\n      children: [_jsxs(_components.p, {\n        children: [\"Create a new file called \", _jsx(_components.code, {\n          children: \"main.go\"\n        }), \" with the following content:\"]\n      }), _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" main\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fmt\\\"\"\n          }), \"\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"func\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"()\"\n            })]\n          }), \" {\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello, Go!\\\"\"\n          }), \")\\n}\\n\"]\n        })\n      }), _jsx(_components.p, {\n        children: \"Let's break down this code:\"\n      }), _jsxs(\"ul\", {\n        children: [_jsxs(\"li\", {\n          children: [_jsx(_components.code, {\n            children: \"package main\"\n          }), \": Every Go file starts with a package declaration. The \", _jsx(_components.code, {\n            children: \"main\"\n          }), \" package is special - it defines an executable program rather than a library.\"]\n        }), _jsxs(\"li\", {\n          children: [_jsx(_components.code, {\n            children: \"import \\\"fmt\\\"\"\n          }), \": This imports the \", _jsx(_components.code, {\n            children: \"fmt\"\n          }), \" package, which contains functions for formatted I/O.\"]\n        }), _jsxs(\"li\", {\n          children: [_jsx(_components.code, {\n            children: \"func main()\"\n          }), \": The \", _jsx(_components.code, {\n            children: \"main\"\n          }), \" function is the entry point of your program. When you run your program, execution starts here.\"]\n        }), _jsxs(\"li\", {\n          children: [_jsx(_components.code, {\n            children: \"fmt.Println(\\\"Hello, Go!\\\")\"\n          }), \": This calls the \", _jsx(_components.code, {\n            children: \"Println\"\n          }), \" function from the \", _jsx(_components.code, {\n            children: \"fmt\"\n          }), \" package to print text to the console.\"]\n        })]\n      })]\n    }), \"\\n\", _jsxs(Step, {\n      number: \"4\",\n      title: \"Run your program\",\n      children: [_jsxs(_components.p, {\n        children: [\"Run your program using the \", _jsx(_components.code, {\n          children: \"go run\"\n        }), \" command:\"]\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"go run main.go\"\n        })\n      }), _jsx(_components.p, {\n        children: \"You should see the output:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"Hello, Go!\"\n        })\n      }), _jsx(_components.p, {\n        children: \"Congratulations! You've just written and run your first Go program.\"\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"building-your-program\",\n      children: \"Building Your Program\"\n    }), \"\\n\", _jsxs(Step, {\n      number: \"5\",\n      title: \"Build an executable\",\n      children: [_jsxs(_components.p, {\n        children: [\"The \", _jsx(_components.code, {\n          children: \"go run\"\n        }), \" command compiles and runs your program in one step. To build an executable file that you can run later, use the \", _jsx(_components.code, {\n          children: \"go build\"\n        }), \" command:\"]\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"go build\"\n        })\n      }), _jsxs(_components.p, {\n        children: [\"This creates an executable file named after your module (in this case, \", _jsx(_components.code, {\n          children: \"hello-world\"\n        }), \" or \", _jsx(_components.code, {\n          children: \"hello-world.exe\"\n        }), \" on Windows).\"]\n      }), _jsx(_components.p, {\n        children: \"Run the executable:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"./hello-world  # On Unix-like systems\\nhello-world.exe  # On Windows\"\n        })\n      }), _jsx(_components.p, {\n        children: \"You should see the same output as before:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"Hello, Go!\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"adding-more-functionality\",\n      children: \"Adding More Functionality\"\n    }), \"\\n\", _jsxs(Step, {\n      number: \"6\",\n      title: \"Enhance your program\",\n      children: [_jsxs(_components.p, {\n        children: [\"Let's modify our program to make it more interactive. Update \", _jsx(_components.code, {\n          children: \"main.go\"\n        }), \" with the following code:\"]\n      }), _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" main\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" (\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fmt\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"time\\\"\"\n          }), \"\\n)\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"func\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"()\"\n            })]\n          }), \" {\\n    name := \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Gopher\\\"\"\n          }), \"\\n    currentTime := time.Now()\\n\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello,\\\"\"\n          }), \", name + \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"!\\\"\"\n          }), \")\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The current time is:\\\"\"\n          }), \", currentTime.Format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"15:04:05\\\"\"\n          }), \"))\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Using Printf for formatted output\"\n          }), \"\\n    fmt.Printf(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Today is %s, %d %s %d\\\\n\\\"\"\n          }), \",\\n        currentTime.Weekday(),\\n        currentTime.Day(),\\n        currentTime.Month(),\\n        currentTime.Year())\\n}\\n\"]\n        })\n      }), _jsx(_components.p, {\n        children: \"This enhanced program:\"\n      }), _jsxs(\"ul\", {\n        children: [_jsxs(\"li\", {\n          children: [\"Imports the \", _jsx(_components.code, {\n            children: \"time\"\n          }), \" package to work with dates and times\"]\n        }), _jsx(\"li\", {\n          children: \"Uses variables to store a name and the current time\"\n        }), _jsxs(\"li\", {\n          children: [\"Demonstrates string concatenation with the \", _jsx(_components.code, {\n            children: \"+\"\n          }), \" operator\"]\n        }), _jsxs(\"li\", {\n          children: [\"Uses \", _jsx(_components.code, {\n            children: \"Printf\"\n          }), \" for formatted output with placeholders\"]\n        })]\n      })]\n    }), \"\\n\", _jsxs(Step, {\n      number: \"7\",\n      title: \"Run the enhanced program\",\n      children: [_jsx(_components.p, {\n        children: \"Run your enhanced program:\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"go run main.go\"\n        })\n      }), _jsx(_components.p, {\n        children: \"You should see output similar to this (with the current date and time):\"\n      }), _jsx(Terminal, {\n        children: _jsx(_components.p, {\n          children: \"Hello, Gopher!\\nThe current time is: 14:30:45\\nToday is Monday, 15 May 2023\"\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"exercises\",\n      children: \"Exercises\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now it's your turn to practice what you've learned. Complete the following exercises:\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"exercise-1-personalize-the-greeting\",\n      children: \"Exercise 1: Personalize the greeting\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Modify the program to ask for the user's name and then greet them.\"\n    }), \"\\n\", _jsxs(\"details\", {\n      children: [_jsx(\"summary\", {\n        children: \"Solution\"\n      }), _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" main\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" (\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bufio\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fmt\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"os\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"strings\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"time\\\"\"\n          }), \"\\n)\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"func\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"()\"\n            })]\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create a reader to read from standard input\"\n          }), \"\\n    reader := bufio.NewReader(os.Stdin)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Prompt for name\"\n          }), \"\\n    fmt.Print(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Enter your name: \\\"\"\n          }), \")\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Read the input until a newline\"\n          }), \"\\n    name, _ := reader.ReadString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'\\\\n'\"\n          }), \")\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Trim whitespace (including the newline)\"\n          }), \"\\n    name = strings.TrimSpace(name)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Get current time\"\n          }), \"\\n    currentTime := time.Now()\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Greet the user\"\n          }), \"\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Hello,\\\"\"\n          }), \", name + \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"!\\\"\"\n          }), \")\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The current time is:\\\"\"\n          }), \", currentTime.Format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"15:04:05\\\"\"\n          }), \"))\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Using Printf for formatted output\"\n          }), \"\\n    fmt.Printf(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Today is %s, %d %s %d\\\\n\\\"\"\n          }), \",\\n        currentTime.Weekday(),\\n        currentTime.Day(),\\n        currentTime.Month(),\\n        currentTime.Year())\\n}\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"exercise-2-add-a-custom-greeting-based-on-the-time-of-day\",\n      children: \"Exercise 2: Add a custom greeting based on the time of day\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Extend the program to provide a different greeting based on the time of day (morning, afternoon, evening).\"\n    }), \"\\n\", _jsxs(\"details\", {\n      children: [_jsx(\"summary\", {\n        children: \"Solution\"\n      }), _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" main\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" (\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bufio\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fmt\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"os\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"strings\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"time\\\"\"\n          }), \"\\n)\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"func\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"()\"\n            })]\n          }), \" {\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Create a reader to read from standard input\"\n          }), \"\\n    reader := bufio.NewReader(os.Stdin)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Prompt for name\"\n          }), \"\\n    fmt.Print(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Enter your name: \\\"\"\n          }), \")\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Read the input until a newline\"\n          }), \"\\n    name, _ := reader.ReadString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'\\\\n'\"\n          }), \")\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Trim whitespace (including the newline)\"\n          }), \"\\n    name = strings.TrimSpace(name)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Get current time\"\n          }), \"\\n    currentTime := time.Now()\\n    hour := currentTime.Hour()\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Determine greeting based on time of day\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"var\"\n          }), \" greeting \", _jsx(_components.span, {\n            className: \"hljs-type\",\n            children: \"string\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" hour < \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"12\"\n          }), \" {\\n        greeting = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Good morning\\\"\"\n          }), \"\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" hour < \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"18\"\n          }), \" {\\n        greeting = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Good afternoon\\\"\"\n          }), \"\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        greeting = \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Good evening\\\"\"\n          }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Greet the user\"\n          }), \"\\n    fmt.Printf(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"%s, %s!\\\\n\\\"\"\n          }), \", greeting, name)\\n    fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"The current time is:\\\"\"\n          }), \", currentTime.Format(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"15:04:05\\\"\"\n          }), \"))\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Using Printf for formatted output\"\n          }), \"\\n    fmt.Printf(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Today is %s, %d %s %d\\\\n\\\"\"\n          }), \",\\n        currentTime.Weekday(),\\n        currentTime.Day(),\\n        currentTime.Month(),\\n        currentTime.Year())\\n}\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"challenge-optional\",\n      children: \"Challenge (Optional)\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For an extra challenge, try to implement a program that:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Asks the user for their birth year\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Calculates and displays their age\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Tells them if it's their birthday today\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(\"details\", {\n      children: [_jsx(\"summary\", {\n        children: \"Solution\"\n      }), _jsx(_components.pre, {\n        children: _jsxs(_components.code, {\n          className: \"hljs language-go\",\n          children: [_jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"package\"\n          }), \" main\\n\\n\", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"import\"\n          }), \" (\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"bufio\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"fmt\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"os\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"strconv\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"strings\\\"\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"time\\\"\"\n          }), \"\\n)\\n\\n\", _jsxs(_components.span, {\n            className: \"hljs-function\",\n            children: [_jsx(_components.span, {\n              className: \"hljs-keyword\",\n              children: \"func\"\n            }), \" \", _jsx(_components.span, {\n              className: \"hljs-title\",\n              children: \"main\"\n            }), _jsx(_components.span, {\n              className: \"hljs-params\",\n              children: \"()\"\n            })]\n          }), \" {\\n    reader := bufio.NewReader(os.Stdin)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Get current time\"\n          }), \"\\n    currentTime := time.Now()\\n    currentYear := currentTime.Year()\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Prompt for birth year\"\n          }), \"\\n    fmt.Print(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Enter your birth year: \\\"\"\n          }), \")\\n    birthYearStr, _ := reader.ReadString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'\\\\n'\"\n          }), \")\\n    birthYearStr = strings.TrimSpace(birthYearStr)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Convert string to integer\"\n          }), \"\\n    birthYear, err := strconv.Atoi(birthYearStr)\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" err != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"nil\"\n          }), \" {\\n        fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Invalid year. Please enter a valid number.\\\"\"\n          }), \")\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Calculate age\"\n          }), \"\\n    age := currentYear - birthYear\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Display age\"\n          }), \"\\n    fmt.Printf(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"You are approximately %d years old.\\\\n\\\"\"\n          }), \", age)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Prompt for birth month and day\"\n          }), \"\\n    fmt.Print(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Enter your birth month (1-12): \\\"\"\n          }), \")\\n    birthMonthStr, _ := reader.ReadString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'\\\\n'\"\n          }), \")\\n    birthMonthStr = strings.TrimSpace(birthMonthStr)\\n\\n    fmt.Print(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Enter your birth day (1-31): \\\"\"\n          }), \")\\n    birthDayStr, _ := reader.ReadString(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"'\\\\n'\"\n          }), \")\\n    birthDayStr = strings.TrimSpace(birthDayStr)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Convert to integers\"\n          }), \"\\n    birthMonth, err1 := strconv.Atoi(birthMonthStr)\\n    birthDay, err2 := strconv.Atoi(birthDayStr)\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" err1 != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"nil\"\n          }), \" || err2 != \", _jsx(_components.span, {\n            className: \"hljs-literal\",\n            children: \"nil\"\n          }), \" || birthMonth < \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \" || birthMonth > \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"12\"\n          }), \" || birthDay < \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"1\"\n          }), \" || birthDay > \", _jsx(_components.span, {\n            className: \"hljs-number\",\n            children: \"31\"\n          }), \" {\\n        fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Invalid date. Skipping birthday check.\\\"\"\n          }), \")\\n        \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"return\"\n          }), \"\\n    }\\n\\n    \", _jsx(_components.span, {\n            className: \"hljs-comment\",\n            children: \"// Check if today is their birthday\"\n          }), \"\\n    \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"if\"\n          }), \" currentTime.Month() == time.Month(birthMonth) && currentTime.Day() == birthDay {\\n        fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"🎉 Happy Birthday! 🎂\\\"\"\n          }), \")\\n    } \", _jsx(_components.span, {\n            className: \"hljs-keyword\",\n            children: \"else\"\n          }), \" {\\n        fmt.Println(\", _jsx(_components.span, {\n            className: \"hljs-string\",\n            children: \"\\\"Today is not your birthday.\\\"\"\n          }), \")\\n    }\\n}\\n\"]\n        })\n      })]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"summary\",\n      children: \"Summary\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In this lab, you learned:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"How to set up a Go development environment\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"The basic structure of a Go program\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"How to create, build, and run Go code\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"How to use the \", _jsx(_components.code, {\n          children: \"fmt\"\n        }), \" package for output\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"How to work with variables and the \", _jsx(_components.code, {\n          children: \"time\"\n        }), \" package\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"next-steps\",\n      children: \"Next Steps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now that you've completed this lab, you can:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"Move on to the next lab: \", _jsx(_components.a, {\n          href: \"/labs/go-data-types-and-variables\",\n          children: \"Go Data Types and Variables\"\n        })]\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Explore more about Go's standard library\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Practice by writing more simple Go programs\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"additional-resources\",\n      children: \"Additional Resources\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://golang.org/doc/\",\n          children: \"Official Go Documentation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://gobyexample.com/hello-world\",\n          children: \"Go by Example: Hello World\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.a, {\n          href: \"https://tour.golang.org/welcome/1\",\n          children: \"A Tour of Go\"\n        })\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\nfunction _missingMdxReference(id, component) {\n  throw new Error(\"Expected \" + (component ? \"component\" : \"object\") + \" `\" + id + \"` to be defined: you likely forgot to import, pass, or provide it.\");\n}\n","frontmatter":{},"scope":{}},"content":"\n# Your First Go Program\n\n<Callout type=\"info\">\n  This lab will guide you through writing your first Go program and understanding the basic structure of Go code.\n</Callout>\n\n## Learning Objectives\n\nBy the end of this lab, you will be able to:\n\n- Set up a Go development environment\n- Create and run a simple Go program\n- Understand the basic structure of a Go program\n- Use the `fmt` package for output\n\n## Introduction\n\nGo (or Golang) is a statically typed, compiled programming language designed at Google. It's known for its simplicity, efficiency, and built-in concurrency features. In this lab, we'll write our first Go program and explore the basic structure of Go code.\n\n## Setup\n\n<Step number=\"1\" title=\"Set up your environment\">\n  First, make sure you have Go installed on your system. You can check by running:\n\n  <Terminal>\n  go version\n  </Terminal>\n\n  If Go is not installed, follow the instructions on the [official Go website](https://golang.org/doc/install).\n</Step>\n\n<Step number=\"2\" title=\"Create a new project\">\n  Create a new directory for your project:\n\n  <Terminal>\n  mkdir hello-world\n  cd hello-world\n  </Terminal>\n\n  Initialize a new Go module:\n\n  <Terminal>\n  go mod init example.com/hello-world\n  </Terminal>\n\n  This creates a `go.mod` file that defines your module and its dependencies.\n</Step>\n\n## Writing Your First Go Program\n\n<Step number=\"3\" title=\"Create your first Go file\">\n  Create a new file called `main.go` with the following content:\n\n  ```go\n  package main\n\n  import \"fmt\"\n\n  func main() {\n      fmt.Println(\"Hello, Go!\")\n  }\n  ```\n\n  Let's break down this code:\n\n  <ul>\n    <li>`package main`: Every Go file starts with a package declaration. The `main` package is special - it defines an executable program rather than a library.</li>\n    <li>`import \"fmt\"`: This imports the `fmt` package, which contains functions for formatted I/O.</li>\n    <li>`func main()`: The `main` function is the entry point of your program. When you run your program, execution starts here.</li>\n    <li>`fmt.Println(\"Hello, Go!\")`: This calls the `Println` function from the `fmt` package to print text to the console.</li>\n  </ul>\n</Step>\n\n<Step number=\"4\" title=\"Run your program\">\n  Run your program using the `go run` command:\n\n  <Terminal>\n  go run main.go\n  </Terminal>\n\n  You should see the output:\n\n  <Terminal>\n  Hello, Go!\n  </Terminal>\n\n  Congratulations! You've just written and run your first Go program.\n</Step>\n\n## Building Your Program\n\n<Step number=\"5\" title=\"Build an executable\">\n  The `go run` command compiles and runs your program in one step. To build an executable file that you can run later, use the `go build` command:\n\n  <Terminal>\n  go build\n  </Terminal>\n\n  This creates an executable file named after your module (in this case, `hello-world` or `hello-world.exe` on Windows).\n\n  Run the executable:\n\n  <Terminal>\n  ./hello-world  # On Unix-like systems\n  hello-world.exe  # On Windows\n  </Terminal>\n\n  You should see the same output as before:\n\n  <Terminal>\n  Hello, Go!\n  </Terminal>\n</Step>\n\n## Adding More Functionality\n\n<Step number=\"6\" title=\"Enhance your program\">\n  Let's modify our program to make it more interactive. Update `main.go` with the following code:\n\n  ```go\n  package main\n\n  import (\n      \"fmt\"\n      \"time\"\n  )\n\n  func main() {\n      name := \"Gopher\"\n      currentTime := time.Now()\n\n      fmt.Println(\"Hello,\", name + \"!\")\n      fmt.Println(\"The current time is:\", currentTime.Format(\"15:04:05\"))\n\n      // Using Printf for formatted output\n      fmt.Printf(\"Today is %s, %d %s %d\\n\",\n          currentTime.Weekday(),\n          currentTime.Day(),\n          currentTime.Month(),\n          currentTime.Year())\n  }\n  ```\n\n  This enhanced program:\n\n  <ul>\n    <li>Imports the `time` package to work with dates and times</li>\n    <li>Uses variables to store a name and the current time</li>\n    <li>Demonstrates string concatenation with the `+` operator</li>\n    <li>Uses `Printf` for formatted output with placeholders</li>\n  </ul>\n</Step>\n\n<Step number=\"7\" title=\"Run the enhanced program\">\n  Run your enhanced program:\n\n  <Terminal>\n  go run main.go\n  </Terminal>\n\n  You should see output similar to this (with the current date and time):\n\n  <Terminal>\n  Hello, Gopher!\n  The current time is: 14:30:45\n  Today is Monday, 15 May 2023\n  </Terminal>\n</Step>\n\n## Exercises\n\nNow it's your turn to practice what you've learned. Complete the following exercises:\n\n### Exercise 1: Personalize the greeting\n\nModify the program to ask for the user's name and then greet them.\n\n<details>\n  <summary>Solution</summary>\n\n  ```go\n  package main\n\n  import (\n      \"bufio\"\n      \"fmt\"\n      \"os\"\n      \"strings\"\n      \"time\"\n  )\n\n  func main() {\n      // Create a reader to read from standard input\n      reader := bufio.NewReader(os.Stdin)\n\n      // Prompt for name\n      fmt.Print(\"Enter your name: \")\n\n      // Read the input until a newline\n      name, _ := reader.ReadString('\\n')\n\n      // Trim whitespace (including the newline)\n      name = strings.TrimSpace(name)\n\n      // Get current time\n      currentTime := time.Now()\n\n      // Greet the user\n      fmt.Println(\"Hello,\", name + \"!\")\n      fmt.Println(\"The current time is:\", currentTime.Format(\"15:04:05\"))\n\n      // Using Printf for formatted output\n      fmt.Printf(\"Today is %s, %d %s %d\\n\",\n          currentTime.Weekday(),\n          currentTime.Day(),\n          currentTime.Month(),\n          currentTime.Year())\n  }\n  ```\n</details>\n\n### Exercise 2: Add a custom greeting based on the time of day\n\nExtend the program to provide a different greeting based on the time of day (morning, afternoon, evening).\n\n<details>\n  <summary>Solution</summary>\n\n  ```go\n  package main\n\n  import (\n      \"bufio\"\n      \"fmt\"\n      \"os\"\n      \"strings\"\n      \"time\"\n  )\n\n  func main() {\n      // Create a reader to read from standard input\n      reader := bufio.NewReader(os.Stdin)\n\n      // Prompt for name\n      fmt.Print(\"Enter your name: \")\n\n      // Read the input until a newline\n      name, _ := reader.ReadString('\\n')\n\n      // Trim whitespace (including the newline)\n      name = strings.TrimSpace(name)\n\n      // Get current time\n      currentTime := time.Now()\n      hour := currentTime.Hour()\n\n      // Determine greeting based on time of day\n      var greeting string\n      if hour < 12 {\n          greeting = \"Good morning\"\n      } else if hour < 18 {\n          greeting = \"Good afternoon\"\n      } else {\n          greeting = \"Good evening\"\n      }\n\n      // Greet the user\n      fmt.Printf(\"%s, %s!\\n\", greeting, name)\n      fmt.Println(\"The current time is:\", currentTime.Format(\"15:04:05\"))\n\n      // Using Printf for formatted output\n      fmt.Printf(\"Today is %s, %d %s %d\\n\",\n          currentTime.Weekday(),\n          currentTime.Day(),\n          currentTime.Month(),\n          currentTime.Year())\n  }\n  ```\n</details>\n\n## Challenge (Optional)\n\nFor an extra challenge, try to implement a program that:\n\n- Asks the user for their birth year\n- Calculates and displays their age\n- Tells them if it's their birthday today\n\n<details>\n  <summary>Solution</summary>\n\n  ```go\n  package main\n\n  import (\n      \"bufio\"\n      \"fmt\"\n      \"os\"\n      \"strconv\"\n      \"strings\"\n      \"time\"\n  )\n\n  func main() {\n      reader := bufio.NewReader(os.Stdin)\n\n      // Get current time\n      currentTime := time.Now()\n      currentYear := currentTime.Year()\n\n      // Prompt for birth year\n      fmt.Print(\"Enter your birth year: \")\n      birthYearStr, _ := reader.ReadString('\\n')\n      birthYearStr = strings.TrimSpace(birthYearStr)\n\n      // Convert string to integer\n      birthYear, err := strconv.Atoi(birthYearStr)\n      if err != nil {\n          fmt.Println(\"Invalid year. Please enter a valid number.\")\n          return\n      }\n\n      // Calculate age\n      age := currentYear - birthYear\n\n      // Display age\n      fmt.Printf(\"You are approximately %d years old.\\n\", age)\n\n      // Prompt for birth month and day\n      fmt.Print(\"Enter your birth month (1-12): \")\n      birthMonthStr, _ := reader.ReadString('\\n')\n      birthMonthStr = strings.TrimSpace(birthMonthStr)\n\n      fmt.Print(\"Enter your birth day (1-31): \")\n      birthDayStr, _ := reader.ReadString('\\n')\n      birthDayStr = strings.TrimSpace(birthDayStr)\n\n      // Convert to integers\n      birthMonth, err1 := strconv.Atoi(birthMonthStr)\n      birthDay, err2 := strconv.Atoi(birthDayStr)\n\n      if err1 != nil || err2 != nil || birthMonth < 1 || birthMonth > 12 || birthDay < 1 || birthDay > 31 {\n          fmt.Println(\"Invalid date. Skipping birthday check.\")\n          return\n      }\n\n      // Check if today is their birthday\n      if currentTime.Month() == time.Month(birthMonth) && currentTime.Day() == birthDay {\n          fmt.Println(\"🎉 Happy Birthday! 🎂\")\n      } else {\n          fmt.Println(\"Today is not your birthday.\")\n      }\n  }\n  ```\n</details>\n\n## Summary\n\nIn this lab, you learned:\n\n- How to set up a Go development environment\n- The basic structure of a Go program\n- How to create, build, and run Go code\n- How to use the `fmt` package for output\n- How to work with variables and the `time` package\n\n## Next Steps\n\nNow that you've completed this lab, you can:\n\n- Move on to the next lab: [Go Data Types and Variables](/labs/go-data-types-and-variables)\n- Explore more about Go's standard library\n- Practice by writing more simple Go programs\n\n## Additional Resources\n\n- [Official Go Documentation](https://golang.org/doc/)\n- [Go by Example: Hello World](https://gobyexample.com/hello-world)\n- [A Tour of Go](https://tour.golang.org/welcome/1)\n"},"__N_SSG":true}