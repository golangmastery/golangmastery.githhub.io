{"pageProps":{"source":{"compiledSource":"\"use strict\";\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = {\n    h1: \"h1\",\n    h2: \"h2\",\n    li: \"li\",\n    p: \"p\",\n    ul: \"ul\",\n    ..._provideComponents(),\n    ...props.components\n  };\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h1, {\n      id: \"advanced-go-patterns\",\n      children: \"Advanced Go Patterns\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This course covers advanced design patterns and architectural approaches in Go programming. You'll learn how to structure large-scale applications, implement common design patterns, and leverage Go's concurrency features effectively.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"what-youll-learn\",\n      children: \"What You'll Learn\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Throughout this course, you'll master advanced Go patterns including:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Concurrency patterns and channels best practices\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Error handling strategies for robust applications\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Dependency injection and service locators\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Context package and timeout management\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Advanced testing strategies\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"SOLID principles in Go\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"why-this-matters\",\n      children: \"Why This Matters\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Understanding these patterns will help you write cleaner, more maintainable Go code, especially as your applications grow in complexity. These patterns form the backbone of professional Go development.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"hands-on-labs\",\n      children: \"Hands-on Labs\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This course includes practical labs where you'll implement these patterns in real-world scenarios. Each lab reinforces the concepts covered in the lectures and gives you hands-on experience applying these patterns.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = {\n    ..._provideComponents(),\n    ...props.components\n  };\n  return MDXLayout ? _jsx(MDXLayout, {\n    ...props,\n    children: _jsx(_createMdxContent, {\n      ...props\n    })\n  }) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{}},"frontMatter":{"title":"Advanced Go Patterns","description":"Learn advanced design patterns and best practices in Go","labs":[{"slug":"decorator-pattern-lab","description":"Implement the Decorator Pattern in Go"},{"slug":"state-pattern-lab","description":"Build a state machine using the State Pattern"},{"slug":"concurrency-patterns-lab","description":"Implement common concurrency patterns"}]},"courseSlug":"advanced-go-patterns","modules":[],"currentModule":{"slug":"advanced-go-patterns","title":"Advanced Go Patterns"}},"__N_SSG":true}